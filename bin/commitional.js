#!/usr/bin/env node
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/


// src/index.ts
import { Command } from "commander";

// package.json
var package_default = {
  name: "commitional",
  version: "1.0.0",
  description: "CLI tool for crafting commit messages - compatible with commitlint",
  main: "bin/index.js",
  bin: {
    commitional: "./bin/commitional.js"
  },
  type: "module",
  scripts: {
    build: "tsc -noEmit -skipLibCheck && node esbuild.config.mjs production",
    dev: "node esbuild.config.mjs",
    test: "npm run build && mocha",
    format: "biome format --write .",
    lint: "biome lint --write .",
    check: "tsc -noEmit -skipLibCheck"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/yourusername/commitional.git"
  },
  keywords: [
    "commit",
    "git",
    "cli",
    "lint",
    "commitlint",
    "commitizen"
  ],
  author: "",
  license: "MIT",
  bugs: {
    url: "https://github.com/yourusername/commitional/issues"
  },
  homepage: "https://github.com/yourusername/commitional#readme",
  dependencies: {
    "@inquirer/prompts": "~7.5.2",
    commander: "^11.1.0",
    "simple-git": "~3.27.0"
  },
  devDependencies: {
    "@biomejs/biome": "~1.9.4",
    "@types/mocha": "~10.0.10",
    "@types/node": "~22.15.21",
    esbuild: "~0.25.4",
    husky: "~9.1.7",
    mocha: "~11.5.0",
    tsx: "~4.19.4",
    typescript: "~5.8.3"
  }
};

// src/prompts.ts
import { input, confirm, select } from "@inquirer/prompts";
var COMMIT_TYPES = [
  { name: "feat: A new feature", value: "feat" },
  { name: "fix: A bug fix", value: "fix" },
  { name: "docs: Documentation only changes", value: "docs" },
  { name: "style: Changes that do not affect the meaning of the code", value: "style" },
  { name: "refactor: A code change that neither fixes a bug nor adds a feature", value: "refactor" },
  { name: "perf: A code change that improves performance", value: "perf" },
  { name: "test: Adding missing tests or correcting existing tests", value: "test" },
  { name: "build: Changes that affect the build system or external dependencies", value: "build" },
  { name: "ci: Changes to our CI configuration files and scripts", value: "ci" },
  { name: "chore: Other changes that don't modify src or test files", value: "chore" }
];
async function promptCommitMessage() {
  return {
    type: await select({
      message: "Select the type of change you're committing:",
      choices: COMMIT_TYPES,
      pageSize: 10
    }),
    subject: await input({
      message: "Write a short description of the change:",
      validate: (input2) => {
        if (input2.length === 0) return "Subject is required";
        if (input2.length > 100) return "Subject must be 100 characters or less";
        if (input2[0].toUpperCase() !== input2[0]) return "Subject must start with a capital letter";
        if (input2.endsWith(".")) return "Subject should not end with a period";
        return true;
      }
    }),
    body: await confirm({
      message: "Would you like to add a longer description?",
      default: false
    }).then((v) => {
      if (!v) return "";
      return input({
        message: "Enter a longer description of the changes (optional):",
        validate: (input2) => {
          if (input2.split("\n").some((line) => line.length > 100)) return "Body lines must wrap at 100 characters";
          return true;
        }
      });
    }),
    breaking: await confirm({ message: "Are there any breaking changes?", default: false })
  };
}

// src/lib/formatCommitMessage.ts
function formatCommitMessage(commit) {
  const prefix = commit.breaking ? "BREAKING CHANGE: " : "";
  const header = `${commit.type}${commit.breaking ? "!" : ""}: ${prefix}${commit.subject}`;
  if (!commit.body) {
    return header;
  }
  return `${header}

${commit.body}`;
}

// src/lib/gitUtils.ts
import { simpleGit } from "simple-git";
var git = simpleGit();
async function isGitRepository() {
  try {
    const result = await git.checkIsRepo();
    return result;
  } catch (error) {
    return false;
  }
}
async function getStagedFiles() {
  try {
    const status = await git.status();
    return status.staged;
  } catch (error) {
    console.error("Error getting staged files:", error);
    return [];
  }
}
async function getStagedDiff() {
  try {
    const diff = await git.diff(["--cached"]);
    return diff;
  } catch (error) {
    console.error("Error getting staged diff:", error);
    return "";
  }
}

// src/index.ts
async function main() {
  const program = new Command();
  program.name("commitional").description("CLI tool for crafting commit messages - compatible with commitlint").version(package_default.version, "-v, --version", "Output the current version").addHelpCommand("help [command]", "Display help for command");
  program.action(async () => {
    try {
      const isRepo = await isGitRepository();
      if (!isRepo) {
        console.error("Error: Not in a Git repository");
        process.exit(1);
      }
      if (isRepo) {
        const stagedFiles = await getStagedFiles();
        console.log("\nStaged Files:");
        console.log("-------------");
        if (stagedFiles.length > 0) stagedFiles.forEach((file) => console.log(file));
        else console.log("No files staged");
        const diff = await getStagedDiff();
        if (diff) {
          console.log("\nStaged Changes:");
          console.log("--------------");
          console.log(diff);
        }
      }
      const commitMessage = await promptCommitMessage();
      const formattedMessage = formatCommitMessage(commitMessage);
      console.log("\nGenerated commit message:");
      console.log("------------------------");
      console.log(formattedMessage);
      console.log("------------------------");
      process.exit(0);
    } catch (error) {
      console.error("Error creating commit message:", error);
      process.exit(1);
    }
  });
  try {
    await program.parseAsync(process.argv);
  } catch (error) {
    console.error("Error:", error);
    process.exit(1);
  }
}
main().catch((error) => {
  console.error("Error:", error);
  process.exit(1);
});
